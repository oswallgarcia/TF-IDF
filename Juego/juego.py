# -*- coding: utf-8 -*-
"""Clases2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vN6ZXx9fKNjZviNXD820r8l5TlfGhwWY
"""

class Pinocho:
  
  def __init__ (self, nariz):
    self.longitud_nariz = nariz
    

  def longitud(self):

     cadena = 'La longitud de la nariz es {}'.format(self.longitud_nariz)
     return cadena

  def mentiras(self, cantidad_mentiras):

    try:

      if cantidad_mentiras > 0:
        self.longitud_nariz = self.longitud_nariz + cantidad_mentiras
        cadena = 'La nueva longitud de la nariz es de {}'.format(self.longitud_nariz)
        return cadena

      else:

        cadena = 'No es posible reducir el tamaño de la nariz'
        return cadena

    except:

         cadena = 'Tipo de dato erroneo'
         return cadena

p1 = Pinocho(13)
p1.longitud()
p1.mentiras(24)
p1.mentiras(23)

class Alumno():

  def __init__(self,Nombre,Apellidos,Calificacion = 0, contador = 0):

    self.Nombre = Nombre
    self.Apellidos = Apellidos
    self.Calificacion = Calificacion
    self.contador = contador

  def datos(self):
    
    cadena = "Nombre: {} \nApellidos: {}".format(self.Nombre, self.Apellidos)
    return cadena

  def agregar(self,Materia, calificacion):
    
    try:

        self.Calificacion = self.Calificacion + calificacion
        cadena = "Materia: {}, calificacion: {}".format(Materia,calificacion)
        self.contador += 1
        return cadena

    except:

      print("Error en los argumentos enviados")


  def Promedio(self):

    promedio = self.Calificacion / self.contador
    if promedio >= 6:
      return print("Tu promedio es de: ",promedio,"Estatus: aprobado")
    else:
      return print("Tu promedio es de: ",promedio,"Estatus: reprobado")

    
a1 = Alumno("Oswall Israel","García León")
print(a1.datos())
print(a1.agregar("Español",5.2))
print(a1.agregar("Matemticas",5))
print(a1.agregar("Quimica",5))
print(a1.agregar("Biologia",5))
print(a1.agregar("Civica",5))
a1.Promedio()

class Personaje():

  def __init__(self, Nombre, Ataque, Defensa, Tipo, Vida):

    self.Nombre = Nombre
    self.Ataque = Ataque 
    self.Defensa = Defensa
    self.Tipo = Tipo
    self.Vida = Vida


  def atributos(self):

    caracteristicas = 'Nombre: {}\nAtaque: {}\nDefensa: {}\nTipo: {}\nVida: {}'.format(self.Nombre, self.Ataque, self.Defensa,self.Tipo, self.Vida)
    return print(caracteristicas)

  def pelea(self, otro_personaje):

    if self.Vida == 0:
        cadena = '{} fue destruido previamente, no puede atacar.'.format(self.Nombre)
        return cadena
    elif otro_personaje == 0:
        cadena = '{} fue destruido previamente, no puede defenderse.'.format(otro_personaje.Nombre)
        return cadena
    else:

      if self.Ataque > otro_personaje.Defensa:

        if self.Tipo == "Fuego" and otro_personaje.Tipo == "Planta":

          otro_personaje.Vida -= 3
          if otro_personaje.Vida <= 0:
            return "{} ha sido derrotado".format(otro_personaje.Nombre)
          else:
             return "{} ha recibido gran daño".format(otro_personaje.Nombre)
        
        elif self.Tipo == "Agua" and otro_personaje.Tipo == "Fuego":

          otro_personaje.Vida -= 3
          if otro_personaje.Vida <= 0:
            return "{} ha sido derrotado".format(otro_personaje.Nombre)
          else:
             return "{} ha recibido gran daño".format(otro_personaje.Nombre)   

        elif self.Tipo == "Planta" and otro_personaje.Tipo == "Agua":

          otro_personaje.Vida -= 3
          if otro_personaje.Vida <= 0:
            return "{} ha sido derrotado".format(otro_personaje.Nombre)
          else:
             return "{} ha recibido gran daño".format(otro_personaje.Nombre)

        elif self.Tipo == "Planta" and otro_personaje.Tipo == "Fuego":

          otro_personaje.Defensa *= 2
          otro_personaje.Ataque *= 2

          if self.Ataque > otro_personaje.Defensa:
            otro_personaje.Vida -= 2
            if otro_personaje.Vida <= 0:
              return "{} ha sido derrotado".format(otro_personaje.Nombre)
            else:
              return "{} ha recibido gran daño".format(otro_personaje.Nombre)
          else:
            self.Vida -= 2
            if self.Vida <= 0:
              return "{} ha sido derrotado".format(self.Nombre)
            else:
              return "{} ha recibido gran daño".format(self.Nombre)

          otro_personaje.Defensa /= 2
          otro_personaje.Ataque /= 2

        elif self.Tipo == "Fuego" and otro_personaje.Tipo == "Agua":

          otro_personaje.Defensa *= 2
          otro_personaje.Ataque *= 2

          if self.Ataque > otro_personaje.Defensa:
            otro_personaje.Vida -= 2
            if otro_personaje.Vida <= 0:
              return "{} ha sido derrotado".format(otro_personaje.Nombre)
            else:
              return "{} ha recibido gran daño".format(otro_personaje.Nombre)
          else:
            self.Vida -= 2
            if self.Vida <= 0:
              return "{} ha sido derrotado".format(self.Nombre)
            else:
              return "{} ha recibido gran daño".format(self.Nombre)

          otro_personaje.Defensa /= 2
          otro_personaje.Ataque /= 2

        elif self.Tipo == "Agua" and otro_personaje.Tipo == "Planta":

          otro_personaje.Defensa *= 2
          otro_personaje.Ataque *= 2

          if self.Ataque > otro_personaje.Defensa:
            otro_personaje.Vida -= 2
            if otro_personaje.Vida <= 0:
              return "{} ha sido derrotado".format(otro_personaje.Nombre)
            else:
              return "{} ha recibido gran daño".format(otro_personaje.Nombre)
          else:
            self.Vida -= 2
            if self.Vida <= 0:
              return "{} ha sido derrotado".format(self.Nombre)
            else:
              return "{} ha recibido gran daño".format(self.Nombre)

          otro_personaje.Defensa /= 2
          otro_personaje.Ataque /= 2


        elif self.Ataque < otro_personaje.Defensa:

         if self.Tipo == "Fuego" and otro_personaje.Tipo == "Planta":

            self.Vida -= 3
            otro_personaje.Vida -=1
            if self.Vida <= 0:
              return "{} ha sido derrotado".format(self.Nombre)
            else:
              return "{} ha recibido gran daño".format(self.Nombre)

         elif self.Tipo == "Agua" and otro_personaje.Tipo == "Fuego":

            self.Vida -= 3
            otro_personaje.Vida -=1
            if self.Vida <= 0:
              return "{} ha sido derrotado".format(self.Nombre)
            else:
              return "{} ha recibido gran daño".format(self.Nombre)

         elif self.Tipo == "Planta" and otro_personaje.Tipo == "Agua":

            self.Vida -= 3
            otro_personaje.Vida -=1
            if self.Vida <= 0:
              return "{} ha sido derrotado".format(self.Nombre)
            else:
              return "{} ha recibido gran daño".format(self.Nombre)

         elif self.Tipo == "Fuego" and otro_personaje.Tipo == "Agua":

           self.Vida -= 3
           otro_personaje.Ataque += 100

           if self.Vida <= 0:
             return "{} ha sido derrotado".format(self.Nombre)
           else:
             return "{} ha recibido gran daño".format(self.Nombre)

         elif self.Tipo == "Agua" and otro_personaje.Tipo == "Planta":

           self.Vida -= 3
           otro_personaje.Ataque += 100

           if self.Vida <= 0:
             return "{} ha sido derrotado".format(self.Nombre)
           else:
             return "{} ha recibido gran daño".format(self.Nombre)

        else:

          self.Vida = 0
          otro_personaje.Vida = 0

          cadena = '{} y {} han tenido un empate, ambos fueron destruidos'.format(self.nombre, otro_personaje.nombre)
          return cadena 



Dragon = Personaje("Dragon", 200, 200, "Fuego",5)
Dragon.atributos()
print()
Ogro = Personaje("Ogro del pantano", 300, 150, "Planta",10)
Ogro.atributos()
print()
lagoness = Personaje("Mostruo del Lago ness", 80, 150, "Agua", 3)
lagoness.atributos()
print()

print(Ogro.pelea(lagoness))
lagoness.atributos()

class Romanos():

  def __init__(self, Numero):

    self.Numero =  Numero 

  def Romano(self):

    Millares =  int(self.Numero / 1000)
    Centenas = int((self.Numero % 1000) / 100)
    Decenas = int((self.Numero % 100) / 10)
    Unidades = int(self.Numero % 10)
    cadena = ""

    for i in range(0,Millares):
       cadena += "M"
    for i in range(0, Centenas):

      if Centenas == 9:

        cadena += "CM"
        break

      elif Centenas == 8:

        cadena += "DCCC"

      elif Centenas == 7:

        cadena += "DCC"
        break

      elif Centenas == 6:

        cadena += "DC"
        break

      elif Centenas ==  5:

        cadena += "D"
      
      elif Centenas == 4:

        cadena += "CD"
        break

      elif Centenas == 3:

        cadena += "CCC"
        break

      elif Centenas == 2:

        cadena += "CC"
        break

      elif Centenas == 1:

        cadena += "C"
        break

    for i in range(0, Decenas):

      if Decenas == 9:

        cadena += "XC"
        break

      elif Decenas == 8:

        cadena += "LXXX"
        break

      elif Decenas == 7:

        cadena += "LXX"
        break

      elif Decenas == 6:

        cadena += "LX"
        break

      elif Decenas == 5:

        cadena += "L"
        break
      
      elif Decenas == 4:

        cadena += "XL"
        break

      elif Decenas == 3:

        cadena += "XXX"
        break

      elif Decenas == 2:

        cadena += "XX"
        break

      elif Decenas == 1:

        cadena += "X"
        break

    for i in range(0, Unidades):

      if Unidades == 9:

        cadena += "IX"
        break

      elif Unidades == 8:

        cadena += "VIII"
        break

      elif Unidades == 7:

        cadena += "VII"
        break

      elif Unidades == 6:

        cadena += "VI"
        break

      elif Unidades == 5:

        cadena += "V"
        break
      
      elif Unidades == 4:

        cadena += "IV"
        break

      elif Unidades == 3:

        cadena += "III"
        break

      elif Unidades == 2:

        cadena += "II"
        break

      elif Unidades == 1:

        cadena += "I"
        break


    return cadena

  

p1 = Romanos(2782)
p1.Romano()